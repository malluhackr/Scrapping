import asyncio
import os
from playwright.async_api import async_playwright, Playwright, Route
from fastapi import FastAPI, HTTPException, Query
import uvicorn

# -------------------------------------------------------------------
# Playwright ‡¥¨‡µç‡¥∞‡µó‡¥∏‡µº ‡¥Ü‡¥™‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µá‡¥∑‡µª ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥í‡¥∞‡µÅ ‡¥§‡¥µ‡¥£ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç ‡¥≤‡µã‡¥û‡µç‡¥ö‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ.
# ‡¥á‡¥§‡µç ‡¥ì‡¥∞‡µã ‡¥§‡¥µ‡¥£‡¥Ø‡µÅ‡¥Ç ‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥¨‡µç‡¥∞‡µó‡¥∏‡µº ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡¥ø ‡¥Æ‡µÜ‡¥Æ‡µç‡¥Æ‡¥±‡¥ø ‡¥™‡¥æ‡¥¥‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥í‡¥¥‡¥ø‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.
# -------------------------------------------------------------------
playwright_instance: Playwright = None
browser = None

app = FastAPI(
    title="Powerful Scraper API",
    description="A scraping API using Playwright and FastAPI"
)

@app.on_event("startup")
async def startup_event():
    """‡¥Ü‡¥™‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µá‡¥∑‡µª ‡¥∏‡µç‡¥±‡µç‡¥±‡¥æ‡µº‡¥ü‡µç‡¥ü‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ Playwright-‡¥â‡¥Ç ‡¥¨‡µç‡¥∞‡µó‡¥∏‡¥±‡µÅ‡¥Ç ‡¥≤‡µã‡¥û‡µç‡¥ö‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    global playwright_instance, browser
    playwright_instance = await async_playwright().start()
    # ‡¥Æ‡µÜ‡¥Æ‡µç‡¥Æ‡¥±‡¥ø ‡¥ï‡µÅ‡¥±‡¥µ‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® Firefox ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
    browser = await playwright_instance.firefox.launch()
    print("‚úÖ Playwright browser has been launched successfully.")

@app.on_event("shutdown")
async def shutdown_event():
    """‡¥Ü‡¥™‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µá‡¥∑‡µª ‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥¨‡µç‡¥∞‡µó‡¥∏‡µº ‡¥ï‡µç‡¥≤‡µã‡¥∏‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ."""
    if browser:
        await browser.close()
    if playwright_instance:
        await playwright_instance.stop()
    print("üî• Playwright browser has been shut down.")

# -------------------------------------------------------------------
# ‡¥Æ‡µÜ‡¥Æ‡µç‡¥Æ‡¥±‡¥ø ‡¥≤‡¥æ‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥ö‡¥ø‡¥§‡µç‡¥∞‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç, ‡¥∏‡µç‡¥±‡µç‡¥±‡µà‡¥≤‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç, ‡¥´‡µã‡¥£‡µç‡¥ü‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥¨‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ.
# -------------------------------------------------------------------
async def block_unnecessary_requests(route: Route):
    """Avoid loading images, styles, and fonts to save memory and speed up."""
    if route.request.resource_type in ["image", "stylesheet", "font", "media", "script"]:
        # Allow scripts from the main domain, block third-party scripts
        if "script" == route.request.resource_type and route.request.url.startswith(route.request.frame.url.split('/')[0:3][2]):
             await route.continue_()
        else:
            await route.abort()
    else:
        await route.continue_()
        
# -------------------------------------------------------------------
# ‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥®‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü API ‡¥é‡µª‡¥°‡µç‚Äå‡¥™‡µã‡¥Ø‡¥ø‡¥®‡µç‡¥±‡µç
# -------------------------------------------------------------------
@app.get("/scrape")
async def scrape_video_details(url: str = Query(..., description="The URL of the video page to scrape")):
    """
    ‡¥í‡¥∞‡µÅ URL-‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µç ‡¥µ‡µÄ‡¥°‡¥ø‡¥Ø‡µã‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥™‡µá‡¥∞‡µÅ‡¥Ç (title), ‡¥ï‡µç‡¥µ‡¥æ‡¥≥‡¥ø‡¥±‡µç‡¥±‡¥ø ‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç (qualities)
    Playwright ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥∏‡µç‡¥ï‡µç‡¥∞‡¥æ‡¥™‡µç‡¥™‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.
    """
    if not browser:
        raise HTTPException(status_code=503, detail="Browser is not initialized.")
    
    context = await browser.new_context()
    page = await context.new_page()

    captured_links = set()

    # ‡¥®‡µÜ‡¥±‡µç‡¥±‡µç‚Äå‡¥µ‡µº‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥≠‡µç‡¥Ø‡µº‡¥§‡µç‡¥•‡¥®‡¥ï‡µæ ‡¥™‡¥ø‡¥ü‡¥ø‡¥ö‡µç‡¥ö‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥í‡¥∞‡µÅ ‡¥á‡¥µ‡¥®‡µç‡¥±‡µç ‡¥π‡¥æ‡µª‡¥°‡µç‚Äå‡¥≤‡µº ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ
    def handle_request(request):
        if any(ext in request.url for ext in [".m3u8", ".mp4"]):
            if "m3u8" in request.url or "mp4" in request.url:
                captured_links.add(request.url)
    
    page.on("request", handle_request)

    try:
        # ‡¥Ö‡¥®‡¥æ‡¥µ‡¥∂‡µç‡¥Ø ‡¥Ö‡¥≠‡µç‡¥Ø‡µº‡¥§‡µç‡¥•‡¥®‡¥ï‡µæ ‡¥¨‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ
        await page.route("**/*", block_unnecessary_requests)
        
        # ‡¥™‡µá‡¥ú‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥™‡µã‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ (60 ‡¥∏‡µÜ‡¥ï‡µç‡¥ï‡µª‡¥°‡µç ‡¥µ‡¥∞‡µÜ ‡¥ï‡¥æ‡¥§‡µç‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç)
        await page.goto(url, timeout=60000, wait_until="domcontentloaded")

        # JavaScript ‡¥≤‡µã‡¥°‡µç ‡¥Ü‡¥ï‡¥æ‡¥®‡µÅ‡¥Ç ‡¥®‡µÜ‡¥±‡µç‡¥±‡µç‚Äå‡¥µ‡µº‡¥ï‡µç‡¥ï‡µç ‡¥ï‡µã‡¥≥‡µÅ‡¥ï‡µæ ‡¥µ‡¥∞‡¥æ‡¥®‡µÅ‡¥Ç 10 ‡¥∏‡µÜ‡¥ï‡µç‡¥ï‡µª‡¥°‡µç ‡¥ï‡¥æ‡¥§‡µç‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        await page.wait_for_timeout(10000)
        
        # ‡¥™‡µá‡¥ú‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥§‡¥≤‡¥ï‡µç‡¥ï‡µÜ‡¥ü‡µç‡¥ü‡µç (Title) ‡¥é‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        title = await page.title()
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {str(e)}")
    finally:
        # ‡¥™‡µá‡¥ú‡µÅ‡¥Ç ‡¥ï‡µã‡µ∫‡¥ü‡µÜ‡¥ï‡µç‡¥∏‡µç‡¥±‡µç‡¥±‡µÅ‡¥Ç ‡¥ï‡µç‡¥≤‡µã‡¥∏‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µç ‡¥Æ‡µÜ‡¥Æ‡µç‡¥Æ‡¥±‡¥ø ‡¥´‡µç‡¥∞‡µÄ‡¥Ø‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ
        await page.close()
        await context.close()

    if not captured_links and not title:
        raise HTTPException(status_code=404, detail="Could not find a title or any video links.")

    return {
        "title": title,
        "qualities": list(captured_links)
    }

# -------------------------------------------------------------------
# ‡¥à ‡¥ï‡µã‡¥°‡µç ‡¥®‡µá‡¥∞‡¥ø‡¥ü‡µç‡¥ü‡µç ‡¥±‡µ∫ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ Uvicorn ‡¥∏‡µÜ‡µº‡¥µ‡µº ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡¥æ‡µª
# -------------------------------------------------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
